<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>